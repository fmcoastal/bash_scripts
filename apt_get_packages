#!/bin/bash


######################################################################
# this function modifies the ssh server configuration.
#  - allows RootAccess       - PermitRootLogin
#  - extends Idle Timeout    - ClientAliveInterval/ClientAliveCountMax
ssh_config_change_config(){
# vim /etc/ssh/sshd_conf

# save the original File
cp   sshd_config sshd_config_original

# test for the presence of the sshd_config  file.
if [ ! -f  /etc/ssh/sshd_config ] ; then
   echo ""
   echo " cannot find /etc/ssh/sshd_config  is openssh-server installed?"
   echo " exiting"
   exit 1
fi

# sed
#    #ClientAliveCountMax 3
#    ClientAliveCountMax 600
MAX_COUNT=$(cat /etc/ssh/sshd_config | grep \#ClientAliveCountMax )
echo "--Original: ClientAliveMaxCount  $MAX_COUNT"
if [ "$MAX_COUNT" != "" ] ; then
   echo "    uncomment #ClientAliveCountMax and set to 600"
   sed -i 's/.*ClientAliveCountMax.*/ClientAliveCountMax 600/g' /etc/ssh/sshd_config
fi

# sed
#    #ClientAliveInterval 0
#    ClientAliveInterval 3
ALIVE=$(cat /etc/ssh/sshd_config | grep \#ClientAliveInterval )
echo "--Original ClientAliveInterval  $ALIVE"
if [ "$ALIVE" != "" ] ; then
   echo "    uncomment #ClientAliveInterval and set to 3"
   sed -i  's/.*ClientAliveInterval.*/ClientAliveInterval 3/g' /etc/ssh/sshd_config
fi

# sed
#    #PermitRootLogin prohibit-password
#    PermitRootLogin yes
ROOT_LOGIN=$(cat /etc/ssh/sshd_config | grep \#PermitRootLogin )
echo "--Original:  PermitRootLogin $ROOT_LOGIN"
if [ "$ROOT_LOGIN" != "" ] ; then
   echo "    uncomment #PermitRootLogin and set to \"yes\""
   sed -i 's/.*PermitRootLogin.*/PermitRootLogin yes/g'       /etc/ssh/sshd_config
fi

# now restart the sshd service.
systemctl restart sshd
}


apt update

#################################
# Editing and search Items:
#################################
apt-get install vim
if [ ! -f  /home/fsmith/.vimrc ]
then
   echo "set nu" >/home/fsmith/.vimrc
#   echo "set mu" >>/home/fsmith/.vimrc
   echo "syntax on" >>/home/fsmith/.vimrc
fi
echo "set nu" >/root/.vimrc
#   echo "set mu" >>/root/.vimrc
echo "syntax on" >>/root/.vimrc


apt-get install git 
git config --global user.name "Frank Smith"
git config --global user.email fsmith@cavium.com
git config --global core.editor vim
git config --global --add color.ui true
git config --global format.pretty oneline

tempstring=$(cat /etc/apt/sources.list | grep universe)
if [  $tempsting == "" ] ; then
   echo " need to modifiy /etc/apt/sources.list "
   echo "adding below to sources.list"
   echo " deb http://ports.ubuntu.com/ubuntu-ports/ bionic universe "
   echo " deb http://ports.ubuntu.com/ubuntu-ports/ bionic universe " >> /etc/apt/sources.list
   apt-get update
fi
apt-get install cscope

#################################
# Network Items:
#################################
apt-get install ntp -y
apt-get install tcpdump -y
apt-get install ethtool -y
apt-get install openssh-server -y
   ssh_config_change_config
#
apt-get install curl 
apt-get install pciutils
apt-get install tftpd-hpa  
exit
apt-get install nfs-client 
apt-get install ipsec-tools 

apt-get install openssl
apt-get install ssh
apt-get install net-tools
#apt-get install nds-client


#For Dockers
INC_DOCKER_ITEMS=0
if [ $INC_KERNEL_ITEMS == 1 ] ; then
  apt-get install gnupg-agent
  apt-get install software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#  add-apt-repository \
#   "deb [arch=arm64] https://download.docker.com/linux/ubuntu \
#   $(lsb_release -cs) \
#   stable"
  add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
 
  apt-get update
 
  apt-get install docker-ce docker-ce-cli containerd.io
fi

#################################
# Disk/Storage  Items:
#################################
apt-get install alien -y
apt-get install gdisk -y
apt-get install gparted -y
apt-get install xz-utils -y




#################################
# Compiling Code  Items:
#################################
INC_KERNEL_ITEMS=0
if [ $INC_KERNEL_ITEMS == 1 ] ; then

   apt-get install bison -y
   apt-get install flex -y
   apt-get install libpcap-dev -y
   apt-get install libncurses-dev -y
   apt-get install fakeroot -y
   apt-get install build-essential -y

   apt-get build-dep linux-image-$(uname -r) -y
   apt-get install linux-headers-$(uname -r) -y
   apt-get install kernel-package -y
fi

