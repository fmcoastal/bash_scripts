 #/bin/bash

# this script expects a uSD card with 3 partitions on it
#    first Partition > size of flash-image.bin (512M) - For the boot stub/loader & u-boot
#    second  Partiton ~ 4G   - emergency Partition which you can boot to to
#                            recover / fix the third Partition
#    Third Partiton > bulk of storage



REL_NAME=SDK-10.1.1-PR1

#TARGET_DIR=a80x0_mcbin_single_shot-release-output
#TARGET_NAME=armada-8040-mcbin-single-shot

TARGET_DIR=a37xx_espressobin_1000_800-release-output
TARGET_NAME=armada-3720-espressobin


GREEN=$'\e[32m'
RED=$'\e[31m'
NORMAL=$'\e[0m'


Banner() {
echo ""
echo "********"
echo "* $1"
echo "********"
}


#***************
# banner " Must be root from here out "
usrname=$(whoami)
if [ $usrname != "root" ] ; then
   echo "Need to be root.  Exiting script"
   exit 1
fi



#command line check see - see if the number of arguments is zero
if [ $# -eq 0 ] ; then
  echo $RED
  echo " need to specify a target block device "
  echo "   Usage: "
  echo "     mk_uSD_Image <BLOCK_DEVICE> "
  echo "     # ./mk_uSD_Image sdc "
  echo $NORMAL
   exit
fi




BLOCK_DEVICE="$1"
PARTITION_1="$1"1
PARTITION_2="$1"2
PARTITION_3="$1"3

  echo $GREEN
  echo ""
  echo "********"

  echo  "Block Device:  $BLOCK_DEVICE "
  echo  "  First  Partition: $PARTITION_1 "
  echo  "  Second Partition: $PARTITION_2 "
  echo  "  Third  Partition: $PARTITION_3 "
  echo  "TARGET DIR:    $TARGET_DIR" 
  echo  "TARGET_NAME:   $TARGET_NAME" 
  echo  "BLOCK_DEVICE:  $BLOCK_DEVICE" 
  echo "**"
  echo $NORMAL

if [ ! -e  /dev/$BLOCK_DEVICE ];then
   echo $RED
   echo "cannot find /dev/$BLOCK_DEVICE  -- Exiting"
   echo $NORMAL
   exit 1
fi

echo "********"
echo "* check to see if any part of /dev/$BLOCK_DEVICE is mounted?"
echo "********"
CHK_MOUNTED=$(mount |grep -i /dev/$BLOCK_DEVICE)


if [ "$CHK_MOUNTED" != "" ];then
   echo ""
   echo $CHK_MOUNTED
   echo " "
   echo "  the drive looks to be mounted - exiting "
   exit 1
fi



pushd  $TARGET_DIR/
   cd images/
   dd if=flash-image.bin of=/dev/sdc1
   mkfs.ext4 /dev/sdc2
   mkfs.ext4 /dev/sdc3



   mount /dev/sdc2 /mnt
   mkdir /mnt/boot
   mkdir /mnt/root
   if [ ! -f rootfs.tar ] ; then
      echo "missing $PWD/rootfs.tar " 
      exit 1
   fi
   if [ ! -f Image ] ; then
      echo "missing $PWD/Image " 
      exit 1
   fi
    if [ ! -f $TARGET_NAME.dtb ] ; then
      echo "missing $PWD/$TARGET_NAME.dtb " 
      exit 1
   fi

   cp rootfs.tar /mnt/.
   cp Image /mnt/boot/Image_$REL_NAME
   cp $TARGET_NAME.dtb  /mnt/boot/$TARGET_NAME.dtb_$REL_NAME
   cp $TARGET_NAME.dtb  /mnt/boot/dtf.dtb
   cp rootfs.tar /mnt/root/.
   rm -rf /mnt/lost+found

 
   if [ ! -d /foo ] ; then
       mkdir /foo
   fi
   mount /dev/sdc3 /foo

  pushd /foo
     cp -R /mnt/* .
     rm -rf lost+found
  popd


  pushd  /mnt
     tar -xvf rootfs.tar
     echo "$REL_NAME=SDK"1 >PARTITON2
  popd 


  pushd  /foo
     tar -xvf rootfs.tar
     echo "$REL_NAME=SDK"  >PARTITON3
  popd
 
  echo $RED
  echo "Waiting for \"sync\" to complete " 
  echo $NORMAL
  sync
 
  umount /mnt
  umount /foo

popd

echo $GREEN
echo "Fin"
echo $NORMAL
