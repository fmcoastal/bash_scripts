#!/bin/bash

#TARGET=DOUBLE_SHOT
#TARGET=SINGLE_SHOT
TARGET=CN83XX
#TARGET=CN9130
#TARGET=CN96XX
#TARGET=A3900

######################
# BASE_DIR is the directory the SDK is installed in.

#BASE_DIR=/sdk/SDK19061
#BASE_DIR=/sdk/SDK190603/SDK10.0_19.06.3-src
#BASE_DIR=/home/fsmith/marvell/sdk/sdk10_ed1003_with_dpdk/SDK10.0-ED1003-DPDK/sdk
BASE_DIR=/home/fsmith/marvell/sdk/PR2003



######################
#filename created by buildroot process for the root filesystem 
ROOTFS_FILE=rootfs.tar

######################
#filename created by script containing Image and .dtb files.
# the contents of this should be placed in /boot of your filesystem.
BOOT_FILES=image.tar
######################
#filename created by script containing kernel module  files.
# the contents of this should be exploded at / in your filesystem
LIB_FILES=lib.tar



TEMP_DIR=temp


#################### 
# Output Manipulations
BLACK=$'\e[30m'
RED=$'\e[31m'
GREEN=$'\e[32m'
YELLOW=$'\e[33m'
BLUE=$'\e[34m'
MAGENTA=$'\e[35m'
CYAN=$'\e[36m'
GRAY=$'\e[37m'
WHITE=$'\e[0m'

NORMAL=$'\e[0m'
BOLD=$'\e[1m'
UNDERLINE=$'\e[4m'
BLINK=$'\e[5m'
INVERT=$'\e[7m'

#   banner()
banner() {
echo ""
echo "********"
echo "* $1"
echo "********"
}


# select the target Directory.
if [ "$TARGET" == "DOUBLE_SHOT" ] ;  then

    OUTPUT_DIR=a80x0_mcbin-release-output

elif [ "$TARGET" == "SINGLE_SHOT" ] ;  then

    OUTPUT_DIR=a80x0_mcbin_single_shot-release-output

elif [ "$TARGET" == "CN9130" ] ;  then

    OUTPUT_DIR=cn9130-release-output

elif [ "$TARGET" == "CN96XX" ] ;  then

    OUTPUT_DIR=cn96xx-release-output

elif [ "$TARGET" == "CN83XX" ] ;  then

    OUTPUT_DIR=cn83xx-release-output


elif [ "$TARGET" == "A3900" ] ;  then

   OUTPUT_DIR=a3900_B-release-output

else

   echo $RED
   echo "\"TARGET\" not defined in Script"
   echo $WHITE
   echo "     - please modifiy script"
   echo "     exiting"
   exit
  
fi





echo " -----------   WARNING -------------- "
echo " We will use "
echo $GREEN
echo "    sdk:  $BASE_DIR  for $OUTPUT_DIR  "
echo $WHITE
echo " ------------------------------------ "
sleep 5



# save where we are :-)
CURRENT_DIR=$PWD

banner "change directory to $BASE_DIR/$OUTPUT_DIR"
pushd $BASE_DIR/$OUTPUT_DIR

banner " Remove any Existing $BOOT_FILES / $LIB_FILES "
if [ -f $BOOT_FILES ] ; then
   echo " - found old $BOOT_FILES - Removing"
   rm -rf $BOOT_FILES
fi

if [ -f $LIB_FILES ] ; then
   echo " - found old $LIB_FILES - Removing"
   rm -rf $LIB_FILES
fi

banner " Create $TEMP_DIR to un-tar $ROOTFS_FILE in "
mkdir $TEMP_DIR

banner "  Un-tar $ROOTFS_FILE  "
tar -xvf ./images/$ROOTFS_FILE  --directory $TEMP_DIR

#echo "-------# need to fix why there are duplicate files associted with cp.----------"
#echo "PWD $PWD"
#echo "CURRENT_DIR $CURRENT_DIR"
#echo "BASE_DIR/OUTPUT_DIR  $BASE_DIR/$OUTPUT_DIR"
#echo "-----------------"

banner "  tar - up  $BOOT_FILES  "

if [ "$TARGET" == "CN83XX" ] || [ "$TARGET" == "CN96XX" ] ;  then
# old cavium tool chain does not put the "Image" file in \boot directory
 tar -cvf $BOOT_FILES  -C $BASE_DIR/$OUTPUT_DIR/images Image
 tar -rvf $BOOT_FILES  -C $BASE_DIR/$OUTPUT_DIR/images   $BASE_DIR/$OUTPUT_DIR/images/*.img

echo "$BOOT_FILES:"
tar -tvf $BOOT_FILES

else
 tar -cvf $BOOT_FILES --directory  $TEMP_DIR/boot .
fi
md5sum=$(md5sum $BOOT_FILES)
echo $md5sum > "$BOOT_FILES".md5 



banner "  tar - up  $LIB_FILES  "
tar -cvf $LIB_FILES --directory $TEMP_DIR  lib/modules/.
md5sum=$(md5sum $LIB_FILES)
echo $md5sum > "$LIB_FILES".md5 


if [ $CURRENT_DIR  != $BASE_DIR/$OUTPUT_DIR ] ; then
 banner "Transfer files to current directory"
 mv -f $BOOT_FILES  $CURRENT_DIR/.
 mv -f "$BOOT_FILES".md5  $CURRENT_DIR/.
 mv -f $LIB_FILES  $CURRENT_DIR/.
 mv -f "$LIB_FILES".md5  $CURRENT_DIR/.
else
 banner "no Transfer needed: current dir is output/images  dir"
fi

banner "  Remove the temp directory we created  "
rm -rf $TEMP_DIR

banner " Done  "
popd

