#!/bin/bash

# This script downloads the arm version of the ubuntu operating system
#     and extracts the rootfs to be used with Octeon Processors.
#     
# My directory structure for  ubuntu / "to get a rootfs" looks like:
#
#      /home/<username>/marvell/ubuntu
#
#BASE_DIR=/home/fsmith/marvell/ubuntu
BASE_DIR=$PWD
#
# You may need to go to the ubuntu site ($ISO_IMAGE_URL) to dertermine
#     what the latest  release of Ubuntu is. UpdatE $ISO_IMAGE to 
#    refelct the latest 
#
ISO_IMAGE=ubuntu-18.04.5-server-arm64.iso
#ISO_IMAGE=ubuntu-18.04.3-server-arm64.iso
#ISO_IMAGE=ubuntu-18.04.2-server-arm64.iso
ISO_IMAGE_URL=http://cdimage.ubuntu.com/releases/18.04/release
#
# the script will create a directory ($ROOTFS_DIR) which contains
#   the ubunto rootfs
#
ROOTFS_DIR=ubuntu_rootfs
#
#  The script file will compress the \"newly created ubuntu rootfs\". The
#     name of the new file will be $ROOTFS_FILES
ROOTFS_FILE=ubuntu_rootfs.b2z
#
# I need a temporary directory to decompress the squash_rootfs into. 
#   Thie direcory will be created and deleted by the script
MOUNT_DIR=temp_squashfs
#
#References:
#  none
 

banner() {
echo ""
echo "********"
echo "* $1"
echo "********"
}

#***************
banner " if $ISO_IMAGE  is not present, then get it.. "
if [ ! -f $BASE_DIR/$ISO_IMAGE ] ; then
  echo "getting   $ISO_IMAGE_URL/$ISO_IMAGE file"
  wget $ISO_IMAGE_URL/$ISO_IMAGE

  if [ ! -f $BASE_DIR/$ISO_IMAGE ]; then
     echo "failed to download $ISO_IMAGE. probably need to fix Iso Image name or download location."
     exit 2
     fi
else
     echo " -- found $BASE_DIR/$ISO_IMAGE"
fi


#***************
# banner " Must be root from here out "
usrname=$(whoami)
if [ $usrname != "root" ] ; then
   echo "Need to be root.  Exiting script"
   exit 1
fi

#***************
# the unsquash below requres the directory to not exist
banner " Final rootfs directory :$BASE_DIR/$ROOTFS_DIR must not exist. delete if present"
if [ -d $BASE_DIR/$ROOTFS_DIR ] ; then
   echo " removing pre-existing $BASE_DIR/$ROOTFS_DIR "
   rm -rf $BASE_DIR/$ROOTFS_DIR
   sync
fi


#***************
banner " create working directory :$BASE_DIR/$MOUNT_DIR"
mkdir -p $BASE_DIR/$MOUNT_DIR


##***************
##check if file is already mounted. if it is, unmount it
#test=mount | grep $ISO_IMAGE
#if [ -z "$test" ] ; then
#  echo " found ISO already mounted. Lets unmount it!"
#  umount $BASE_DIR/$MOUNT_DIR
#fi

banner " Mount the Iso Image"
mount -o loop -r $BASE_DIR/$ISO_IMAGE $BASE_DIR/$MOUNT_DIR

#let everyting catch up
sync;

#echo $BASE_DIR/$ROOTFS_DIR
#***************
banner " unsquash the file system"
sudo unsquashfs -d $BASE_DIR/$ROOTFS_DIR $BASE_DIR/$MOUNT_DIR/install/filesystem.squashfs


#***************
banner " unmount the file system"
umount $BASE_DIR/$MOUNT_DIR
rm -rf  $BASE_DIR/$MOUNT_DIR


#***************
banner " our file system"
ls $BASE_DIR/$ROOTFS_DIR


#***********************
banner "Modify the passwd file to remove the root login password"
echo edit $BASE_DIR/$ROOTFS_DIR/etc/passwd
echo change:
echo root:x:0:0:root:/root:/bin/bash
echo to:
echo root::0:0:root:/root:/bin/bash

banner "old"
cat $BASE_DIR/$ROOTFS_DIR/etc/passwd
banner "new"
sed -i 's/root:x:0:0:root:/root::0:0:root:/g' $BASE_DIR/$ROOTFS_DIR/etc/passwd
cat $BASE_DIR/$ROOTFS_DIR/etc/passwd

echo "To login:"
echo " U: root"
echo " PW: "
echo "      - no password set for root - "
sleep 5

banner "Compress/Tar the rootfs to $ROOTFS_FILE"
sleep 3

tar -cvjf $ROOTFS_FILE --directory $ROOTFS_DIR .

ls -la $BASE_DIR

banner "done"


